{"version":3,"sources":["reset.svg","InputField.js","validations.js","SignupForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputField","props","state","value","isValid","untouched","formValueChange","bind","e","this","validator","target","setState","touched","changeHandler","valueName","Fragment","htmlFor","label","type","id","onChange","className","React","Component","containsText","str","length","indexOf","isValidEmail","test","toLowerCase","SignupForm","containsInvalidField","validityOfFields","field","push","includes","updateSignUpValue","baseUserValues","newValue","prevState","disabled","onClick","undefined","updateAppState","Confirmation","firstName","email","App","submitUserValue","userValueIsSubmitted","userValues","obj","name","emailAddress","src","reset","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9426b6fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reset.0f2d8b34.svg\";","\nimport React from 'react';\n\nclass InputField extends React.Component {\n    constructor(props) {\n      /* \n      {\n        label: string\n        valueName: string\n        validator: func\n        changeHandler: func\n      }\n      */\n      super(props);\n      this.state = {value: '', isValid: false, untouched: true};\n      this.formValueChange = this.formValueChange.bind(this);\n    }\n\n    formValueChange (e) {\n      const isValid = this.props.validator(e.target.value);\n      this.setState({\n        value: e.target.value,\n        touched: true,\n        isValid \n      });\n  \n      this.props.changeHandler(\n        this.props.valueName,\n        e.target.value,\n        isValid\n      )\n    }\n  \n    render (){\n      return (\n        <React.Fragment>\n          <label htmlFor={this.props.valueName}>\n            {this.props.label}\n          </label>\n          <input \n            type={this.props.type ? this.props.type : \"text\"}\n            id={this.props.valueName}\n            value={this.state.value}\n            onChange={this.formValueChange}\n            className={\n                this.state.touched ? \n                    this.state.isValid ? \"valid\" : \"inValid\"\n                : \"untouched\"\n            }\n          />\n        </React.Fragment>\n      )\n    }\n}\n  \nexport default InputField","\n\nexport const containsText = (str) => (\n    typeof str === \"string\" && \n    str.length > 0 && \n    str.indexOf(' ') === -1\n  );\n\nexport const isValidEmail = (str) => (\n    typeof str === \"string\" && \n    str.length > 0 &&\n    /^\\S+@\\S+[.][0-9a-z]+$/.test(str.toLowerCase())\n  );","\nimport React from 'react';\nimport InputField from './InputField';\nimport {baseUserValues} from './App';\nimport {containsText, isValidEmail} from './validations';\n\nclass SignupForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.updateSignUpValue = this.updateSignUpValue.bind(this);\n      this.state = {...baseUserValues};\n    }\n    \n  \n    updateSignUpValue(\n      valueName, // string \n      newValue,  // string\n      isValid,   //  bool\n    ) {\n      this.setState(prevState=>({\n        ...prevState,\n        [valueName]: {\n          value: newValue,\n          isValid: isValid\n        }\n      }));  \n    }\n  \n    containsInvalidField = () => {\n      let validityOfFields = []; \n      for (const field in this.state){\n        validityOfFields.push(this.state[field].isValid);\n      }\n      return validityOfFields.includes(false)\n    }\n  \n    render() {\n      return (\n        <React.Fragment>\n        <h1>\n            Let's <br/>\n            <strong>Sign Up</strong>\n        </h1>\n        <p>\n            Use the form below to sign up for this super awesome service. You're only a few steps away!\n        </p>\n          <InputField \n            valueName=\"name\" \n            label=\"First Name\"\n            validator={containsText}\n            changeHandler={this.updateSignUpValue}\n          />\n          <InputField \n            valueName=\"emailAddress\" \n            label=\"Email Address\"\n            validator={isValidEmail}\n            changeHandler={this.updateSignUpValue}\n          />\n          <InputField \n            valueName=\"password\" \n            label=\"Password\"\n            validator={containsText}\n            changeHandler={this.updateSignUpValue}\n            type=\"password\"\n          />\n          \n          <button disabled={this.containsInvalidField()} onClick={\n            this.containsInvalidField() ? undefined : ()=>this.props.updateAppState(this.state, true)\n          }> Sign Up </button>\n        </React.Fragment>\n      );\n    }\n}\n\nexport default SignupForm\n  \n","import React from 'react';\nimport './App.css';\nimport SignupForm from './SignupForm';\nimport reset from './reset.svg';\n\nexport let baseUserValues = {\n  'name' : {\n    value: '',\n    isValid: false\n  }, \n  'emailAddress' : {\n    value: '',\n    isValid: false,\n  },\n  'password' : {\n    value: '',\n    isValid: false,\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitUserValue = this.submitUserValue.bind(this);\n    this.state = {\n        userValueIsSubmitted: false,\n        userValues: {\n          ...baseUserValues\n        }\n      };\n  }\n  submitUserValue (\n    obj // userValues\n  ) {\n    this.setState({\n      userValues: {...obj},\n      userValueIsSubmitted: true\n    });\n  }\n  render(){\n    \n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          {this.state.userValueIsSubmitted ? \n            <Confirmation \n              firstName={this.state.userValues.name.value} \n              email={this.state.userValues.emailAddress.value} \n            /> :\n            <SignupForm \n              updateAppState={this.submitUserValue} \n            />\n          }\n        </div>\n        {this.state.userValueIsSubmitted && \n        <img \n          src={reset}\n          className=\"resetLogo\"\n          alt=\"resetLogo\"\n          onClick={()=>this.setState({\n            userValueIsSubmitted: false,\n            userValues: {...baseUserValues}\n          })} \n        />}\n      </React.Fragment>\n    )\n  }\n}\n\n\nfunction Confirmation (props) {return (\n  <React.Fragment>\n    <h1>\n      Welcome,<br />\n      <strong>{props.firstName}!</strong>\n    </h1>\n    <p>\n      You have been registered for this awesome service.<br/>\n      Please check your email listed below for instructions. \n    </p>\n    <p>{props.email}</p>\n    <button>Sign In</button>\n  </React.Fragment>\n)}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}